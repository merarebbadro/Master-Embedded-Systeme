/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include "STM32F103x6.h"
#include "STM32_F103C6_GPIO_Driver.h"
#include "STM32_F103C6_EXTI_Driver.h"
#include "lcd_driver.h"
#include "Keypad_Driver.h"


uint8_t IRQ_Flag = 0;

enum CPUAccessLevel
{
    pivileged,
    unprivileged
};

void SWITCH_CPU_AccessLevel(enum CPUAccessLevel level)
{
    switch(level)
    {
    case pivileged:
        //Clear Bit 0 in CONTROL register
        __asm("MRS R3, CONTROL   \n\t"
              "LSR R3, R3, #0x1  \n\t"
              "LSL R3, R3, #0x1  \n\t"
              "MSR CONTROL, R3");
        break;

    case unprivileged:
        //Set Bit 0 in CONTROL register
        __asm("MRS R3, CONTROL   \n\t"
              "ORR R3, R3, #0x1  \n\t"
              "MSR CONTROL, R3");

        break;
    }
}

void EXTI9_Callback(void)
{
    IRQ_Flag = 1 ;

    SWITCH_CPU_AccessLevel(pivileged);

}

int main(void)
{
    //Enable clock
    RCC_GPIOB_CLK_EN();
    RCC_AFIO_CLK_EN();

    //Set EXTI Configurations
    EXTI_PinConfig_t EXTI_CFG ;
    EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
    EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING ;
    EXTI_CFG.P_IRQ_Callback = EXTI9_Callback ;
    EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable ;
    MCAL_EXTI_GPIO_Init(&EXTI_CFG);


    IRQ_Flag = 1;

    SWITCH_CPU_AccessLevel(unprivileged);

    /* Loop forever */
    while(1)
    {
        if(IRQ_Flag)
        {
            IRQ_Flag = 0 ;
        }
        else{/* MISRA */}

    }
}
